{"version":3,"sources":["file:///Users/mario/Desktop/BigBox/assets/scripts/core/network/HttpRequest.ts"],"names":["HttpMgr","ULog","UString","ins","_ins","sendGet","url","callback","isEncript","debug","encodeURI","xhr","XMLHttpRequest","timeout","open","intervalId","setTimeout","abort","ontimeout","event","clearInterval","onerror","onreadystatechange","readyState","status","response","responseText","isJsonStr","responseJson","JSON","parse","statusText","send","sendPost","params","paramsStr","stringify","setRequestHeader"],"mappings":"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","sourcesContent":["import ULog from \"../util/ULog\";\nimport UString from \"../util/UString\";\n\n/**\n * Http管理类\n */\nexport default class HttpMgr {\n    private static _ins: HttpMgr = null;\n    static get ins(): HttpMgr {\n        if (!this._ins) {\n            this._ins = new HttpMgr();\n        }\n        return this._ins;\n    }\n\n    /**\n     * http get请求\n     * @param url 请求地址\n     * @param callback 回调\n     * @param isEncript 是否加密\n     */\n    sendGet(url: string, callback?: Function, isEncript?: boolean) {\n        ULog.debug('http get请求 url => ', encodeURI(url));\n        let xhr = new XMLHttpRequest();\n        xhr.timeout = 20000;\n        xhr.open(\"GET\", encodeURI(url), true);\n        let intervalId = setTimeout(() => {\n            xhr.abort()\n        }, 20000);\n        xhr.ontimeout = (event) => {\n            clearInterval(intervalId);\n            ULog.debug('http get请求 超时！！！url => ', url)\n        }\n        xhr.onerror = (event) => {\n            ULog.debug('http get请求 错误！！！url => ', url)\n        }\n        xhr.onreadystatechange = function () {\n            if (xhr.readyState == 4) {\n                if (xhr.status >= 200 && xhr.status < 400) {\n                    let response = xhr.responseText;\n                    if (UString.isJsonStr(response)) {\n                        let responseJson = JSON.parse(response);\n                        callback && callback(responseJson);\n                    } else {\n                        ULog.debug('返回的数据不是JSON的字符串，解析出错！！！')\n                    }\n                } else {\n                    ULog.debug('http get请求 error ', xhr.statusText);\n                }\n            }\n        };\n        xhr.send();\n    }\n\n    /**\n     * http post请求\n     * @param url 请求地址\n     * @param params 参数\n     * @param callback 回调\n     * @param isEncript 是否加密\n     */\n    sendPost(url: string, params: Object, callback?: Function, isEncript?: boolean) {\n        ULog.debug('http post请求 url => ', encodeURI(url));\n        ULog.debug('http post请求 params => ', params);\n        let xhr = new XMLHttpRequest();\n        xhr.timeout = 20000;\n        let paramsStr = JSON.stringify(params);\n        xhr.open(\"POST\", encodeURI(url), true);\n        let intervalId = setTimeout(() => {\n            xhr.abort()\n        }, 20000);\n        xhr.ontimeout = (event) => {\n            clearInterval(intervalId);\n            ULog.debug('http post请求 超时！！！url => ', url)\n        }\n        xhr.onerror = (event) => {\n            ULog.debug('http post请求 错误！！！url => ', url)\n        }\n        xhr.onreadystatechange = function () {\n            if (xhr.readyState == 4) {\n                if (xhr.status >= 200 && xhr.status < 400) {\n                    let response = xhr.responseText;\n                    if (UString.isJsonStr(response)) {\n                        let responseJson = JSON.parse(response);\n                        callback && callback(responseJson);\n                    } else {\n                        ULog.debug('http post请求 返回的数据不是JSON的字符串，解析出错！！！')\n                    }\n                } else {\n                    ULog.debug('http post请求 status error, url => ', url);\n                }\n            }\n        };\n        xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded;charset=utf-8\");\n        xhr.send(paramsStr);\n    }\n}\n\n"]}