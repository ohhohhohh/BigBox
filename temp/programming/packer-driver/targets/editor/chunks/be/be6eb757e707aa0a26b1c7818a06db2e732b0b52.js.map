{"version":3,"sources":["file:///Users/mario/Desktop/BigBox/assets/scripts/core/manager/EventManager.ts"],"names":["EventManager","emit","eventName","param","eventCacheArray","_eventCacheMap","get","eventCache","i","length","callback","apply","target","once","splice","on","_on","onOnce","index","findIndex","push","set","off","delete","offTarget","forEach","Map"],"mappings":"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","sourcesContent":["\n/**\n * 事件管理器\n */\nexport default class EventManager {\n    /**\n     * key: 事件名\n     * value: 缓存事件\n     */\n    private static _eventCacheMap: Map<string, EventCache[]> = new Map();\n\n    /**\n     * 广播事件\n     *\n     * @param eventName 事件名\n     * @param param 传递的剩余不定参数\n     */\n    static emit(eventName: string, ...param: any[]): void {\n        let eventCacheArray = this._eventCacheMap.get(eventName);\n        if (eventCacheArray) {\n            let eventCache: EventCache = null;\n            for (let i = eventCacheArray.length - 1; i >= 0; i--) {\n                eventCache = eventCacheArray[i];\n                // call 方法的语法和作用与 apply() 方法类似\n                // 只有一个区别\n                // 就是 call() 方法接受的是一个参数列表，而 apply() 方法接受的是一个包含多个参数的数组。\n                eventCache.callback.apply(eventCache.target, param);\n\n                // 只接受一次回调的事件，在触发之后就移除掉该缓存事件\n                if (eventCache.once) {\n                    eventCacheArray.splice(i, 1);\n                }\n            }\n        }\n    }\n\n    /**\n     * 注册事件\n     *\n     * @param eventName 事件名\n     * @param callback 事件处理函数\n     * @param target 事件处理函数的执行对象\n     */\n    static on(eventName: string, callback: Function, target?: any): void {\n        this._on(eventName, callback, target, false);\n    }\n\n    /**\n     * 注册事件（接受函数执行一次后会自动销毁，不用主动off）\n     *\n     * @param eventName 事件名\n     * @param callback 事件处理函数\n     * @param target 事件处理函数的执行对象\n     */\n    static onOnce(eventName: string, callback: Function, target?: any): void {\n        this._on(eventName, callback, target, true);\n    }\n\n    /**\n     * 注册事件\n     *\n     * @param eventName 事件名\n     * @param callback 事件处理函数\n     * @param target 事件处理函数的执行对象\n     * @param once 是否只回调一次\n     */\n    private static _on(eventName: string, callback: Function, target: any, once: boolean): void {\n        let eventCacheArray = this._eventCacheMap.get(eventName);\n        if (!eventCacheArray) {\n            eventCacheArray = [];\n        }\n        let index = eventCacheArray.findIndex((eventCache) => {\n            return eventCache.target === target && eventCache.callback === callback;\n        });\n\n        if (index === -1) {\n            eventCacheArray.push({\n                target: target,\n                callback: callback,\n                once: once,\n            });\n            this._eventCacheMap.set(eventName, eventCacheArray);\n        }\n    }\n\n    /**\n     * 注销事件\n     *\n     * @param eventName 事件名\n     * @param callback 事件处理函数\n     * @param target 事件处理函数的执行对象\n     */\n    static off(eventName: string, callback?: Function, target?: any): void {\n        let eventCacheArray = this._eventCacheMap.get(eventName);\n        if (eventCacheArray) {\n            if (callback && target) {\n                let index = eventCacheArray.findIndex((eventCache) => {\n                    return eventCache.target === target && eventCache.callback === callback;\n                });\n                if (index !== -1) {\n                    eventCacheArray.splice(index, 1);\n                    this._eventCacheMap.set(eventName, eventCacheArray);\n                }\n            } else {\n                eventCacheArray = null;\n                this._eventCacheMap.delete(eventName);\n            }\n        }\n    }\n\n    /**\n     * 注销某个已经注册的对象的所有事件\n     *\n     * @param target 事件函数处理的执行对象\n     */\n    static offTarget(target: any): void {\n        this._eventCacheMap.forEach((eventCacheArray, eventName) => {\n            if (eventCacheArray) {\n                for (let i = eventCacheArray.length - 1; i >= 0; i--) {\n                    if (eventCacheArray[i].target === target) {\n                        eventCacheArray.splice(i, 1);\n                    }\n                }\n            }\n        });\n    }\n}\n\n/**\n * 缓存事件\n */\ninterface EventCache {\n    /**\n     * 回调函数执行者\n     */\n    target: any;\n\n    /**\n     * 回调函数\n     */\n    callback: Function;\n\n    /**\n     * 是否只回调一次\n     */\n    once: boolean;\n}\n\n\n"]}